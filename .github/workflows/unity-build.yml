name: unity-build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clean Disk Space
        run: |
          echo "üßπ Cleaning up disk space..."
          docker system prune -a -f || true
          docker volume prune -f || true
          docker builder prune -a -f || true
          sudo rm -rf /opt/unity || true
          sudo rm -rf ~/.cache/unity3d || true
          df -h

      - name: Install Android SDK
        run: |
          echo "üì• Installing Android SDK..."
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip sdk-tools.zip -d latest
          rm sdk-tools.zip
          if [ -d "latest/cmdline-tools" ]; then
            mv latest/cmdline-tools/* latest/
            rm -rf latest/cmdline-tools
          fi
          echo "export ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "export ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
          echo "‚úÖ Android SDK installed!"

      - name: Install Android Build Tools
        run: |
          source $GITHUB_ENV
          echo "‚úÖ Updating SDK tools..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update || echo "‚ùå Update failed"
          echo "‚úÖ Accepting SDK licenses..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "‚ùå License acceptance failed "
          echo "‚úÖ Installing Build Tools..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34" "build-tools;34.0.0" "platform-tools" || echo "‚ùå Installation failed"

      - name: Build Android APK with Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          androidExportType: androidPackage
          androidSymbolType: none
          projectPath: .
        continue-on-error: false

      - name: Debug Build Directory Structure
        run: |
          echo "üîç Listing build directory structure..."
          ls -R build/ || echo "build/ dizini bulunamadƒ±"

      - name: Check APK Existence
        run: |
          echo "üîç Searching for APK files..."
          find . -name "*.apk" -print
          if ls build/Android/*.apk 1> /dev/null 2>&1; then
            echo "‚úÖ APK file found in build/Android."
          else
            echo "‚ùå No APK file found in build/Android."
            exit 1
          fi

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-Android
          path: build/Android/*.apk
          retention-days: 5

      - name: Upload APK to Slack using files.getUploadURLExternal and files.completeUploadExternal
        run: |
          echo "üì§ Uploading APK to Slack..."
          APK_FILE=$(find build/Android -name "*.apk" | head -n 1)
          if [ -f "$APK_FILE" ]; then
            echo "‚úÖ APK file found: $APK_FILE"

            # 1. Get upload URL
            RESPONSE=$(curl -X POST \
              -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" \
              -F "filename=$(basename "$APK_FILE")" \
              -F "filetype=apk" \
              -F "channels=#auto_build" \
              https://slack.com/api/files.getUploadURLExternal)
            UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.url')

            if [ "$UPLOAD_URL" != "null" ]; then
              echo "‚úÖ Got upload URL: $UPLOAD_URL"
            else
              echo "‚ùå Failed to get upload URL"
              exit 1
            fi

            # 2. Upload the file in chunks
            CHUNK_SIZE=5M
            FILE_SIZE=$(stat -c %s "$APK_FILE")
            CHUNKS=$((FILE_SIZE / (CHUNK_SIZE)) + 1))
            echo "üì¶ Uploading file in $CHUNKS chunks..."

            for ((i=0; i<$CHUNKS; i++)); do
              START=$((i * CHUNK_SIZE))
              END=$(((i + 1) * CHUNK_SIZE))
              if [ $END -gt $FILE_SIZE ]; then
                END=$FILE_SIZE
              fi
              echo "Uploading chunk $((i + 1)) from byte $START to byte $END"
              curl -X POST \
                -F "file=@$APK_FILE;offset=$START;length=$((END - START))" \
                -F "upload_url=$UPLOAD_URL" \
                https://slack.com/api/files.uploadChunk
            done

            # 3. Complete the upload
            COMPLETION_RESPONSE=$(curl -X POST \
              -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" \
              -F "upload_url=$UPLOAD_URL" \
              https://slack.com/api/files.completeUploadExternal)
          
            if echo "$COMPLETION_RESPONSE" | jq -r '.ok' == "true"; then
              echo "‚úÖ APK uploaded to Slack successfully!"
            else
              echo "‚ùå Failed to complete APK upload to Slack."
              exit 1
            fi
          else
            echo "‚ùå No APK file found to upload."
            exit 1
          fi

      - name: Send Slack Notification with Artifact Link
        run: |
          echo "üì® Sending Slack notification..."
          curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" \
               -H "Content-type: application/json" \
               --data '{
                 "channel": "#auto_build",
                 "text": "‚úÖ APK build completed! Download the APK from the link below:",
                 "attachments": [
                   {
                     "text": "Artifact Link",
                     "actions": [
                       {
                         "type": "button",
                         "text": "Download APK",
                         "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                       }
                     ]
                   }
                 ]
               }' \
               https://slack.com/api/chat.postMessage
