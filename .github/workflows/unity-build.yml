name: unity-build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clean Disk Space
        run: |
          echo "🧹 Cleaning up disk space..."
          docker system prune -a -f || true
          docker volume prune -f || true
          docker builder prune -a -f || true
          sudo rm -rf /opt/unity || true
          sudo rm -rf ~/.cache/unity3d || true
          df -h

      - name: Install Android SDK
        run: |
          echo "📥 Installing Android SDK..."
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip sdk-tools.zip -d latest
          rm sdk-tools.zip
          if [ -d "latest/cmdline-tools" ]; then
            mv latest/cmdline-tools/* latest/
            rm -rf latest/cmdline-tools
          fi
          echo "export ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "export ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
          echo "✅ Android SDK installed!"

      - name: Install Android Build Tools
        run: |
          source $GITHUB_ENV
          echo "✅ Updating SDK tools..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update || echo "❌ Update failed"
          echo "✅ Accepting SDK licenses..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "❌ License acceptance failed "
          echo "✅ Installing Build Tools..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34" "build-tools;34.0.0" "platform-tools" || echo "❌ Installation failed"

      - name: Build Android APK with Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          androidExportType: androidPackage
          androidSymbolType: none
          projectPath: .
        continue-on-error: false

      - name: Debug Build Directory Structure
        run: |
          echo "🔍 Listing build directory structure..."
          ls -R build/ || echo "build/ dizini bulunamadı"

      - name: Check APK Existence
        run: |
          echo "🔍 Searching for APK files..."
          find . -name "*.apk" -print
          if ls build/Android/*.apk 1> /dev/null 2>&1; then
            echo "✅ APK file found in build/Android."
          else
            echo "❌ No APK file found in build/Android."
            exit 1
          fi

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-Android
          path: build/Android/*.apk
          retention-days: 5

      - name: Send Slack Notification with APK
        run: |
          echo "📤 APK dosyası Slack'e yükleniyor..."

          # APK dosyasını bul
          FILE_PATH=$(find build/Android/ -type f -name "*.apk" | head -n 1)

          if [ -z "$FILE_PATH" ]; then
            echo "❌ APK dosyası bulunamadı!"
            exit 1
          fi

          FILE_NAME=$(basename "$FILE_PATH")

          # Dosya boyutunu al (stat komutunu kullanarak)
          if command -v stat &> /dev/null; then
            FILE_SIZE=$(stat -c%s "$FILE_PATH")
          else
            FILE_SIZE=$(wc -c < "$FILE_PATH" | tr -d ' ')
          fi

          if [ -z "$FILE_SIZE" ] || [ "$FILE_SIZE" -le 0 ]; then
            echo "❌ Geçerli dosya boyutu alınamadı!"
            exit 1
          fi

          echo "🔍 Dosya Adı: $FILE_NAME"
          echo "📦 Dosya Boyutu: $FILE_SIZE bytes"

          # Slack'ten upload URL ve file ID al
          JSON_PAYLOAD=$(jq -n --arg filename "$FILE_NAME" --argjson length "$FILE_SIZE" '{filename: $filename, length: $length}')
          echo "🛠 Gönderilen JSON Payload: $JSON_PAYLOAD"

          UPLOAD_RESPONSE=$(curl -s -X POST "https://slack.com/api/files.getUploadURLExternal" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json; charset=utf-8" \
            --data "$JSON_PAYLOAD")

          echo "🛠 API Yanıtı: $UPLOAD_RESPONSE"

          # JSON'dan değerleri çek
          UPLOAD_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.upload_url')
          FILE_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.file_id')

          # Hata kontrolü
          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" == "null" ]; then
            echo "❌ Slack yükleme URL'si alınamadı! Hata: $UPLOAD_RESPONSE"
            exit 1
          fi

          echo "🔄 Dosya yükleniyor..."
          curl -X POST -F file=@"$FILE_PATH" "$UPLOAD_URL"

          echo "✅ Yükleme tamamlandı, Slack'e bildiriliyor..."
          curl -X POST "https://slack.com/api/files.completeUploadExternal" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json; charset=utf-8" \
            --data "$(jq -n --arg file_id "$FILE_ID" --arg channel_id "#auto_build" --arg initial_comment "🚀 *Unity Build Tamamlandı!* ✅ İşte APK dosyan! 📱" '{file_id: $file_id, channel_id: $channel_id, initial_comment: $initial_comment}')"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
     
      
     
